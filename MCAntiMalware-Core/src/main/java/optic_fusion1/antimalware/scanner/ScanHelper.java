package optic_fusion1.antimalware.scanner;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.util.LinkedList;
import java.util.function.Consumer;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

public final class ScanHelper {

    private ScanHelper() {

    }

    public static boolean isFileEmpty(Path path) {
        try {
            return Files.size(path) == 0;
        } catch (IOException e) {
            LOGGER.exception(e);
            return false;
        }
    }

    public static void walkThroughFiles(Path dir, Consumer<Path> pathConsumer) {
        if (".".equals(String.valueOf(dir.getFileName()))) { // if (dir.getFileName() != null && dir.getFileName().toString().equals(".")) {
            return;
        }

        if (Files.isDirectory(dir, LinkOption.NOFOLLOW_LINKS)) {
            ScanHelper.walkTroughDirectory(dir, pathConsumer);
            return;
        }

        if (Files.isSymbolicLink(dir)) {
            return;
        }

        pathConsumer.accept(dir);
    }

    public static void walkTroughDirectory(Path dir, Consumer<Path> pathConsumer) {
        var stack = new LinkedList<Path>();
        stack.add(dir);

        while (!stack.isEmpty()) {
            var current = stack.pollLast();

            try(var list = Files.list(current).filter(path -> !Files.isSymbolicLink(path))) {
                var iterator = list.iterator();

                while (iterator.hasNext()) {
                    var next = iterator.next();
                    pathConsumer.accept(next);

                    if (Files.isDirectory(next, LinkOption.NOFOLLOW_LINKS)) {
                        stack.addLast(next);
                    }
                }
            } catch (IOException e) {
                LOGGER.exception(e);
            }
        }
    }

}
