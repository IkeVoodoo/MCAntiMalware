/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.check.impl;

import optic_fusion1.antimalware.AntiMalware;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import optic_fusion1.antimalware.database.Database;
import optic_fusion1.antimalware.utils.PluginConfigUtils;
import org.objectweb.asm.tree.ClassNode;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

public class PluginYMLCheck extends BaseCheck {

    private static final Pattern WEBSITE_PATTERN = Pattern.compile("website.*: *(.*)");
    private static final Pattern NAME_PATTERN = Pattern.compile("name.*: *(.*)");
    private static final Pattern VERSION_PATTERN = Pattern.compile("version.*: *(.*)");

    @Override
    public List<CheckResult> process(ClassNode classNode, Path rootFolder, Path zipFile, CacheContainer cache) {
        Path pluginYML = rootFolder.resolve("plugin.yml");
        if (!Files.exists(pluginYML)) return List.of();

        Database database = AntiMalware.getInstance().getDatabase();

        var out = new ArrayList<CheckResult>();

        try {
            var yml = new String(Files.readAllBytes(pluginYML));
            var name = extractString(yml, NAME_PATTERN);
            var website = extractString(yml, WEBSITE_PATTERN);
            var version = extractVersion(yml);
            var authors = PluginConfigUtils.getAuthors(yml);

            if (authors.contains("PullingHoes") && name.equals("NightVisionPlus") && version < 2.2) {
                out.add(new CheckResult("Spigot", "MALWARE", "NightVisionPlus", "A", "plugin.yml", "", -1));
            }

            if (cache.containsBlacklistedWebsite(website)) {
                out.add(database.getCheckResultForWebsite(website));
            }

            for (var author : authors) {
                if (cache.containsBlacklistedAuthor(author)) {
                    out.add(database.getCheckResultForAuthor(author));
                }
            }
        } catch (Exception e) {
            LOGGER.exception(e);
        }

        return out;
    }


    private String extractString(String yml, Pattern pattern) {
        var matcher = pattern.matcher(yml);
        if (!matcher.find()) return "";

        return matcher.group(1);
    }

    private double extractVersion(String yml) {
        try {
            return Double.parseDouble(extractString(yml, VERSION_PATTERN));
        } catch (NumberFormatException e) {
            return 0.0;
        }
    }
}
